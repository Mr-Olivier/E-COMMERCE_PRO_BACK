// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the UserRole enum
enum UserRole {
  ADMIN
  CUSTOMER
}

// Define the OrderStatus enum
enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Define the User model
model User {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  email             String    @unique
  phoneNumber       String    @unique
  password          String
  role              UserRole  @default(CUSTOMER)
  isVerified        Boolean   @default(false)
  verificationCode  String?
  verificationExpiry DateTime?
  // New fields for password reset

  cart              Cart?
  resetPasswordCode String?
  resetPasswordExpiry DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  orders            Order[]
  reviews           Review[]
}

// Define the Product model

// Add ProductCategory enum
enum ProductCategory {
  SMARTPHONES
  LAPTOPS
  TVS
  GAMING
  ACCESSORIES
  CAMERAS
  AUDIO
}

// Add ProductStatus enum
enum ProductStatus {
  ACTIVE
  DRAFT
  OUT_OF_STOCK
}

// Update Product model
model Product {
  id            String          @id @default(uuid())
  name          String
  price         Decimal
  originalPrice Decimal?        // Optional field for sale items
  description   String
  category      ProductCategory
  stock         Int
  status        ProductStatus   @default(ACTIVE)
  images        String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reviews       Review[]
  orderItems    OrderItem[]
   cartItems     CartItem[] 
}

// Define the Order model
model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

// Define the OrderItem model
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
}

// Define the Review model
model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}